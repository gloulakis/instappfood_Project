{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar RNGoogleSignin = NativeModules.RNGoogleSignin;\nvar IS_IOS = Platform.OS === 'ios';\n\nvar GoogleSignin = function () {\n  function GoogleSignin() {\n    _classCallCheck(this, GoogleSignin);\n\n    _defineProperty(this, \"configPromise\", void 0);\n\n    if (__DEV__ && !RNGoogleSignin) {\n      console.error(\"RN GoogleSignin native module is not correctly linked. Please read the readme, setup and troubleshooting instructions carefully or try manual linking. If you're using Expo, please use expo-google-sign-in. This is because Expo does not support custom native modules.\");\n    }\n  }\n\n  _createClass(GoogleSignin, [{\n    key: \"signIn\",\n    value: function signIn() {\n      var options,\n          _args = arguments;\n      return _regeneratorRuntime.async(function signIn$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(this.configPromise);\n\n            case 3:\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(RNGoogleSignin.signIn(options));\n\n            case 5:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"hasPlayServices\",\n    value: function hasPlayServices() {\n      var options,\n          _args2 = arguments;\n      return _regeneratorRuntime.async(function hasPlayServices$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {\n                showPlayServicesUpdateDialog: true\n              };\n\n              if (!IS_IOS) {\n                _context2.next = 5;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", true);\n\n            case 5:\n              if (!(options && options.showPlayServicesUpdateDialog === undefined)) {\n                _context2.next = 7;\n                break;\n              }\n\n              throw new Error('RNGoogleSignin: Missing property `showPlayServicesUpdateDialog` in options object for `hasPlayServices`');\n\n            case 7:\n              return _context2.abrupt(\"return\", RNGoogleSignin.playServicesAvailable(options.showPlayServicesUpdateDialog));\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (options.offlineAccess && !options.webClientId) {\n        throw new Error('RNGoogleSignin: offline use requires server web ClientID');\n      }\n\n      this.configPromise = RNGoogleSignin.configure(options);\n    }\n  }, {\n    key: \"addScopes\",\n    value: function addScopes(options) {\n      var isSignedIn;\n      return _regeneratorRuntime.async(function addScopes$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(this.isSignedIn());\n\n            case 2:\n              isSignedIn = _context3.sent;\n\n              if (isSignedIn) {\n                _context3.next = 5;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", null);\n\n            case 5:\n              return _context3.abrupt(\"return\", IS_IOS ? RNGoogleSignin.addScopes(options) : RNGoogleSignin.getCurrentUser());\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"signInSilently\",\n    value: function signInSilently() {\n      return _regeneratorRuntime.async(function signInSilently$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(this.configPromise);\n\n            case 2:\n              return _context4.abrupt(\"return\", RNGoogleSignin.signInSilently());\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"signOut\",\n    value: function signOut() {\n      return _regeneratorRuntime.async(function signOut$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", RNGoogleSignin.signOut());\n\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"revokeAccess\",\n    value: function revokeAccess() {\n      return _regeneratorRuntime.async(function revokeAccess$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              return _context6.abrupt(\"return\", RNGoogleSignin.revokeAccess());\n\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"isSignedIn\",\n    value: function isSignedIn() {\n      return _regeneratorRuntime.async(function isSignedIn$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              return _context7.abrupt(\"return\", RNGoogleSignin.isSignedIn());\n\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getCurrentUser\",\n    value: function getCurrentUser() {\n      return _regeneratorRuntime.async(function getCurrentUser$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              return _context8.abrupt(\"return\", RNGoogleSignin.getCurrentUser());\n\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"clearCachedAccessToken\",\n    value: function clearCachedAccessToken(tokenString) {\n      return _regeneratorRuntime.async(function clearCachedAccessToken$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (!(!tokenString || typeof tokenString !== 'string')) {\n                _context9.next = 2;\n                break;\n              }\n\n              return _context9.abrupt(\"return\", Promise.reject('GoogleSignIn: clearCachedAccessToken() expects a string token.'));\n\n            case 2:\n              if (!IS_IOS) {\n                _context9.next = 6;\n                break;\n              }\n\n              _context9.t0 = null;\n              _context9.next = 9;\n              break;\n\n            case 6:\n              _context9.next = 8;\n              return _regeneratorRuntime.awrap(RNGoogleSignin.clearCachedAccessToken(tokenString));\n\n            case 8:\n              _context9.t0 = _context9.sent;\n\n            case 9:\n              return _context9.abrupt(\"return\", _context9.t0);\n\n            case 10:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getTokens\",\n    value: function getTokens() {\n      var tokens, userObject;\n      return _regeneratorRuntime.async(function getTokens$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              if (!IS_IOS) {\n                _context10.next = 7;\n                break;\n              }\n\n              _context10.next = 3;\n              return _regeneratorRuntime.awrap(RNGoogleSignin.getTokens());\n\n            case 3:\n              tokens = _context10.sent;\n              return _context10.abrupt(\"return\", tokens);\n\n            case 7:\n              _context10.next = 9;\n              return _regeneratorRuntime.awrap(RNGoogleSignin.getTokens());\n\n            case 9:\n              userObject = _context10.sent;\n              return _context10.abrupt(\"return\", {\n                idToken: userObject.idToken,\n                accessToken: userObject.accessToken\n              });\n\n            case 11:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return GoogleSignin;\n}();\n\nexport var GoogleSigninSingleton = new GoogleSignin();\nexport var statusCodes = {\n  SIGN_IN_CANCELLED: RNGoogleSignin.SIGN_IN_CANCELLED,\n  IN_PROGRESS: RNGoogleSignin.IN_PROGRESS,\n  PLAY_SERVICES_NOT_AVAILABLE: RNGoogleSignin.PLAY_SERVICES_NOT_AVAILABLE,\n  SIGN_IN_REQUIRED: RNGoogleSignin.SIGN_IN_REQUIRED\n};","map":{"version":3,"sources":["GoogleSignin.ts"],"names":["RNGoogleSignin","IS_IOS","Platform","constructor","__DEV__","console","signIn","options","hasPlayServices","showPlayServicesUpdateDialog","configure","addScopes","isSignedIn","signInSilently","signOut","revokeAccess","getCurrentUser","clearCachedAccessToken","Promise","getTokens","tokens","userObject","idToken","accessToken","GoogleSigninSingleton","statusCodes","SIGN_IN_CANCELLED","IN_PROGRESS","PLAY_SERVICES_NOT_AVAILABLE","SIGN_IN_REQUIRED"],"mappings":"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","sourcesContent":["import { NativeModules, Platform } from 'react-native';\nimport type {\n  AddScopesParams,\n  SignInParams,\n  ConfigureParams,\n  HasPlayServicesParams,\n  User,\n} from './types';\n\nconst { RNGoogleSignin } = NativeModules;\n\nconst IS_IOS = Platform.OS === 'ios';\n\nclass GoogleSignin {\n  configPromise?: Promise<void>;\n\n  constructor() {\n    if (__DEV__ && !RNGoogleSignin) {\n      console.error(\n        `RN GoogleSignin native module is not correctly linked. Please read the readme, setup and troubleshooting instructions carefully or try manual linking. If you're using Expo, please use expo-google-sign-in. This is because Expo does not support custom native modules.`,\n      );\n    }\n  }\n\n  async signIn(options: SignInParams = {}): Promise<User> {\n    await this.configPromise;\n    return await RNGoogleSignin.signIn(options);\n  }\n\n  async hasPlayServices(\n    options: HasPlayServicesParams = { showPlayServicesUpdateDialog: true },\n  ): Promise<boolean> {\n    if (IS_IOS) {\n      return true;\n    } else {\n      if (options && options.showPlayServicesUpdateDialog === undefined) {\n        throw new Error(\n          'RNGoogleSignin: Missing property `showPlayServicesUpdateDialog` in options object for `hasPlayServices`',\n        );\n      }\n      return RNGoogleSignin.playServicesAvailable(options.showPlayServicesUpdateDialog);\n    }\n  }\n\n  configure(options: ConfigureParams = {}): void {\n    if (options.offlineAccess && !options.webClientId) {\n      throw new Error('RNGoogleSignin: offline use requires server web ClientID');\n    }\n\n    this.configPromise = RNGoogleSignin.configure(options);\n  }\n\n  async addScopes(options: AddScopesParams): Promise<User | null> {\n    const isSignedIn = await this.isSignedIn();\n    if (!isSignedIn) {\n      return null;\n    }\n    return IS_IOS ? RNGoogleSignin.addScopes(options) : RNGoogleSignin.getCurrentUser();\n  }\n\n  async signInSilently(): Promise<User> {\n    await this.configPromise;\n    return RNGoogleSignin.signInSilently();\n  }\n\n  async signOut(): Promise<null> {\n    return RNGoogleSignin.signOut();\n  }\n\n  async revokeAccess(): Promise<null> {\n    return RNGoogleSignin.revokeAccess();\n  }\n\n  async isSignedIn(): Promise<boolean> {\n    return RNGoogleSignin.isSignedIn();\n  }\n\n  async getCurrentUser(): Promise<User | null> {\n    return RNGoogleSignin.getCurrentUser();\n  }\n\n  async clearCachedAccessToken(tokenString: string): Promise<null> {\n    if (!tokenString || typeof tokenString !== 'string') {\n      return Promise.reject('GoogleSignIn: clearCachedAccessToken() expects a string token.');\n    }\n    return IS_IOS ? null : await RNGoogleSignin.clearCachedAccessToken(tokenString);\n  }\n\n  async getTokens(): Promise<{ idToken: string; accessToken: string }> {\n    if (IS_IOS) {\n      const tokens = await RNGoogleSignin.getTokens();\n      return tokens;\n    } else {\n      const userObject = await RNGoogleSignin.getTokens();\n      return {\n        idToken: userObject.idToken,\n        accessToken: userObject.accessToken,\n      };\n    }\n  }\n}\n\nexport const GoogleSigninSingleton = new GoogleSignin();\n\nexport const statusCodes = {\n  SIGN_IN_CANCELLED: RNGoogleSignin.SIGN_IN_CANCELLED,\n  IN_PROGRESS: RNGoogleSignin.IN_PROGRESS,\n  PLAY_SERVICES_NOT_AVAILABLE: RNGoogleSignin.PLAY_SERVICES_NOT_AVAILABLE,\n  SIGN_IN_REQUIRED: RNGoogleSignin.SIGN_IN_REQUIRED,\n};\n"]},"metadata":{},"sourceType":"module"}