{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"style\"];\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { PureComponent } from 'react';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { RNGoogleSigninButton } from \"./RNGoogleSiginButton\";\nvar RNGoogleSignin = NativeModules.RNGoogleSignin;\nexport var GoogleSigninButton = function (_PureComponent) {\n  _inherits(GoogleSigninButton, _PureComponent);\n\n  var _super = _createSuper(GoogleSigninButton);\n\n  function GoogleSigninButton() {\n    var _this;\n\n    _classCallCheck(this, GoogleSigninButton);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"_clickListener\", void 0);\n\n    return _this;\n  }\n\n  _createClass(GoogleSigninButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (Platform.OS === 'android') {\n        this._clickListener = DeviceEventEmitter.addListener('RNGoogleSigninButtonClicked', function () {\n          _this2.props.onPress && _this2.props.onPress();\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._clickListener && this._clickListener.remove();\n    }\n  }, {\n    key: \"getRecommendedSize\",\n    value: function getRecommendedSize() {\n      switch (this.props.size) {\n        case RNGoogleSignin.BUTTON_SIZE_ICON:\n          return styles.iconSize;\n\n        case RNGoogleSignin.BUTTON_SIZE_WIDE:\n          return styles.wideSize;\n\n        default:\n          return styles.standardSize;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          style = _this$props.style,\n          props = _objectWithoutProperties(_this$props, _excluded);\n\n      return React.createElement(RNGoogleSigninButton, _extends({}, props, {\n        style: [this.getRecommendedSize(), style]\n      }));\n    }\n  }]);\n\n  return GoogleSigninButton;\n}(PureComponent);\n\n_defineProperty(GoogleSigninButton, \"Size\", {\n  Icon: RNGoogleSignin.BUTTON_SIZE_ICON,\n  Standard: RNGoogleSignin.BUTTON_SIZE_STANDARD,\n  Wide: RNGoogleSignin.BUTTON_SIZE_WIDE\n});\n\n_defineProperty(GoogleSigninButton, \"Color\", {\n  Dark: RNGoogleSignin.BUTTON_COLOR_DARK,\n  Light: RNGoogleSignin.BUTTON_COLOR_LIGHT\n});\n\n_defineProperty(GoogleSigninButton, \"defaultProps\", {\n  size: RNGoogleSignin.BUTTON_SIZE_STANDARD\n});\n\nvar styles = StyleSheet.create({\n  iconSize: {\n    width: 48,\n    height: 48\n  },\n  standardSize: {\n    width: 230,\n    height: 48\n  },\n  wideSize: {\n    width: 312,\n    height: 48\n  }\n});","map":{"version":3,"sources":["GoogleSigninButton.tsx"],"names":["RNGoogleSignin","NativeModules","GoogleSigninButton","Icon","Standard","Wide","BUTTON_SIZE_WIDE","Dark","Light","BUTTON_COLOR_LIGHT","size","BUTTON_SIZE_STANDARD","componentDidMount","Platform","componentWillUnmount","getRecommendedSize","styles","render","props","iconSize","width","height","standardSize","wideSize"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,aAAA,QAAA,OAAA;;;;;AAYA,SAAA,oBAAA;AAGA,IAAMA,cAAgC,GAAGC,aAAa,CAAtD,cAAA;AAUA,WAAO,kBAAP;AAAA;;AAAA;;AAA+E,gCAAA;AAAA;;AAAA;;AAAA,sCAAA,IAAA;AAAA,MAAA,IAAA;AAAA;;AAAA,oDAAA,IAAA;;AAAA,IAAA,eAAA,gCAAA,gBAAA,EAAA,KAAA,CAAA,CAAA;;AAAA;AAAA;;AAA/E;AAAA;AAAA,WAkBEW,6BAAoB;AAAA;;AAClB,UAAIC,QAAQ,CAARA,EAAAA,KAAJ,SAAA,EAA+B;AAC7B,aAAA,cAAA,GAAsB,kBAAkB,CAAlB,WAAA,CAAA,6BAAA,EAA8D,YAAM;AACxF,UAAA,MAAA,CAAA,KAAA,CAAA,OAAA,IAAsB,MAAA,CAAA,KAAA,CAAtB,OAAsB,EAAtB;AADF,SAAsB,CAAtB;AAGD;AACF;AAxBH;AAAA;AAAA,WA0BEC,gCAAuB;AACrB,WAAA,cAAA,IAAuB,KAAA,cAAA,CAAvB,MAAuB,EAAvB;AACD;AA5BH;AAAA;AAAA,WA8BEC,8BAAqB;AACnB,cAAQ,KAAA,KAAA,CAAR,IAAA;AACE,aAAKf,cAAc,CAAnB,gBAAA;AACE,iBAAOgB,MAAM,CAAb,QAAA;;AACF,aAAKhB,cAAc,CAAnB,gBAAA;AACE,iBAAOgB,MAAM,CAAb,QAAA;;AACF;AACE,iBAAOA,MAAM,CAAb,YAAA;AANJ;AAQD;AAvCH;AAAA;AAAA,WAyCEC,kBAAS;AACP,wBAA4B,KADrB,KACP;AAAA,UAAM,KAAN,eAAM,KAAN;AAAA,UAAkBC,KAAlB;;AAGA,aAAO,KAAA,CAAA,aAAA,CAAA,oBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAiC,QAAA,KAAK,EAAE,CAAC,KAAD,kBAAC,EAAD,EAAA,KAAA;AAAxC,OAAA,CAAA,CAAP;AACD;AA9CH;;AAAA;AAAA,EAAO,aAAP;;gBAAahB,kB,UAGG;AACZC,EAAAA,IAAI,EAAEH,cAAc,CADR,gBAAA;AAEZI,EAAAA,QAAQ,EAAEJ,cAAc,CAFZ,oBAAA;AAGZK,EAAAA,IAAI,EAAEL,cAAc,CAACM;AAHT,C;;gBAHHJ,kB,WASI;AACbK,EAAAA,IAAI,EAAEP,cAAc,CADP,iBAAA;AAEbQ,EAAAA,KAAK,EAAER,cAAc,CAACS;AAFT,C;;gBATJP,kB,kBAcW;AACpBQ,EAAAA,IAAI,EAAEV,cAAc,CAACW;AADD,C;;AAoCxB,IAAMK,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EADG,EAAA;AAERC,IAAAA,MAAM,EAAE;AAFA,GADqB;AAK/BC,EAAAA,YAAY,EAAE;AAAEF,IAAAA,KAAK,EAAP,GAAA;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GALiB;AAM/BE,EAAAA,QAAQ,EAAE;AAAEH,IAAAA,KAAK,EAAP,GAAA;AAAcC,IAAAA,MAAM,EAAE;AAAtB;AANqB,CAAlB,CAAf","sourcesContent":["import React, { PureComponent } from 'react';\n\nimport {\n  NativeModules,\n  Platform,\n  DeviceEventEmitter,\n  StyleSheet,\n  EmitterSubscription,\n  ViewProps,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\nimport { RNGoogleSigninButton } from './RNGoogleSiginButton';\nimport type { RNGoogleSignType } from './types';\n\nconst RNGoogleSignin: RNGoogleSignType = NativeModules.RNGoogleSignin;\n\nexport interface GoogleSigninButtonProps extends ViewProps {\n  style?: StyleProp<ViewStyle>;\n  size?: 0 | 1 | 2;\n  color?: 0 | 1;\n  disabled?: boolean;\n  onPress?(): void;\n}\n\nexport class GoogleSigninButton extends PureComponent<GoogleSigninButtonProps> {\n  _clickListener?: EmitterSubscription;\n\n  static Size = {\n    Icon: RNGoogleSignin.BUTTON_SIZE_ICON,\n    Standard: RNGoogleSignin.BUTTON_SIZE_STANDARD,\n    Wide: RNGoogleSignin.BUTTON_SIZE_WIDE,\n  };\n\n  static Color = {\n    Dark: RNGoogleSignin.BUTTON_COLOR_DARK,\n    Light: RNGoogleSignin.BUTTON_COLOR_LIGHT,\n  };\n\n  static defaultProps = {\n    size: RNGoogleSignin.BUTTON_SIZE_STANDARD,\n  };\n\n  componentDidMount() {\n    if (Platform.OS === 'android') {\n      this._clickListener = DeviceEventEmitter.addListener('RNGoogleSigninButtonClicked', () => {\n        this.props.onPress && this.props.onPress();\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._clickListener && this._clickListener.remove();\n  }\n\n  getRecommendedSize() {\n    switch (this.props.size) {\n      case RNGoogleSignin.BUTTON_SIZE_ICON:\n        return styles.iconSize;\n      case RNGoogleSignin.BUTTON_SIZE_WIDE:\n        return styles.wideSize;\n      default:\n        return styles.standardSize;\n    }\n  }\n\n  render() {\n    const { style, ...props } = this.props;\n\n    // @ts-ignore style prop incompatible\n    return <RNGoogleSigninButton {...props} style={[this.getRecommendedSize(), style]} />;\n  }\n}\n\n// sizes according to https://developers.google.com/identity/sign-in/ios/reference/Classes/GIDSignInButton\nconst styles = StyleSheet.create({\n  iconSize: {\n    width: 48,\n    height: 48,\n  },\n  standardSize: { width: 230, height: 48 },\n  wideSize: { width: 312, height: 48 },\n});\n"]},"metadata":{},"sourceType":"module"}